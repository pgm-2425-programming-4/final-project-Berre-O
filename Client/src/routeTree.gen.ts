/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsCategoryIdIndexImport } from './routes/projects/$categoryId/index'
import { Route as ProjectsCategoryIdBacklogImport } from './routes/projects/$categoryId/backlog'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsCategoryIdIndexRoute = ProjectsCategoryIdIndexImport.update({
  id: '/projects/$categoryId/',
  path: '/projects/$categoryId/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsCategoryIdBacklogRoute = ProjectsCategoryIdBacklogImport.update({
  id: '/projects/$categoryId/backlog',
  path: '/projects/$categoryId/backlog',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$categoryId/backlog': {
      id: '/projects/$categoryId/backlog'
      path: '/projects/$categoryId/backlog'
      fullPath: '/projects/$categoryId/backlog'
      preLoaderRoute: typeof ProjectsCategoryIdBacklogImport
      parentRoute: typeof rootRoute
    }
    '/projects/$categoryId/': {
      id: '/projects/$categoryId/'
      path: '/projects/$categoryId'
      fullPath: '/projects/$categoryId'
      preLoaderRoute: typeof ProjectsCategoryIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$categoryId/backlog': typeof ProjectsCategoryIdBacklogRoute
  '/projects/$categoryId': typeof ProjectsCategoryIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$categoryId/backlog': typeof ProjectsCategoryIdBacklogRoute
  '/projects/$categoryId': typeof ProjectsCategoryIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/projects/$categoryId/backlog': typeof ProjectsCategoryIdBacklogRoute
  '/projects/$categoryId/': typeof ProjectsCategoryIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/projects/$categoryId/backlog' | '/projects/$categoryId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/projects/$categoryId/backlog' | '/projects/$categoryId'
  id:
    | '__root__'
    | '/'
    | '/projects/$categoryId/backlog'
    | '/projects/$categoryId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsCategoryIdBacklogRoute: typeof ProjectsCategoryIdBacklogRoute
  ProjectsCategoryIdIndexRoute: typeof ProjectsCategoryIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsCategoryIdBacklogRoute: ProjectsCategoryIdBacklogRoute,
  ProjectsCategoryIdIndexRoute: ProjectsCategoryIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/projects/$categoryId/backlog",
        "/projects/$categoryId/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/projects/$categoryId/backlog": {
      "filePath": "projects/$categoryId/backlog.jsx"
    },
    "/projects/$categoryId/": {
      "filePath": "projects/$categoryId/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
