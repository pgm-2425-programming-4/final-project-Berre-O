/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as CategoriesCategoryIdIndexImport } from './routes/categories/$categoryId/index'
import { Route as CategoriesCategoryIdBacklogImport } from './routes/categories/$categoryId/backlog'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesCategoryIdIndexRoute = CategoriesCategoryIdIndexImport.update({
  id: '/categories/$categoryId/',
  path: '/categories/$categoryId/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesCategoryIdBacklogRoute =
  CategoriesCategoryIdBacklogImport.update({
    id: '/categories/$categoryId/backlog',
    path: '/categories/$categoryId/backlog',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/categories/$categoryId/backlog': {
      id: '/categories/$categoryId/backlog'
      path: '/categories/$categoryId/backlog'
      fullPath: '/categories/$categoryId/backlog'
      preLoaderRoute: typeof CategoriesCategoryIdBacklogImport
      parentRoute: typeof rootRoute
    }
    '/categories/$categoryId/': {
      id: '/categories/$categoryId/'
      path: '/categories/$categoryId'
      fullPath: '/categories/$categoryId'
      preLoaderRoute: typeof CategoriesCategoryIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/categories/$categoryId/backlog': typeof CategoriesCategoryIdBacklogRoute
  '/categories/$categoryId': typeof CategoriesCategoryIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/categories/$categoryId/backlog': typeof CategoriesCategoryIdBacklogRoute
  '/categories/$categoryId': typeof CategoriesCategoryIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/categories/$categoryId/backlog': typeof CategoriesCategoryIdBacklogRoute
  '/categories/$categoryId/': typeof CategoriesCategoryIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/categories/$categoryId/backlog' | '/categories/$categoryId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/categories/$categoryId/backlog' | '/categories/$categoryId'
  id:
    | '__root__'
    | '/'
    | '/categories/$categoryId/backlog'
    | '/categories/$categoryId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoriesCategoryIdBacklogRoute: typeof CategoriesCategoryIdBacklogRoute
  CategoriesCategoryIdIndexRoute: typeof CategoriesCategoryIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesCategoryIdBacklogRoute: CategoriesCategoryIdBacklogRoute,
  CategoriesCategoryIdIndexRoute: CategoriesCategoryIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/categories/$categoryId/backlog",
        "/categories/$categoryId/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/categories/$categoryId/backlog": {
      "filePath": "categories/$categoryId/backlog.jsx"
    },
    "/categories/$categoryId/": {
      "filePath": "categories/$categoryId/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
